# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


def passTextIntoEditor(driver, text, element):
    # Wrapper for inserting text into the editor to test real time translation
    # Based on a solution from skolmer on this issue thread: https://github.com/facebook/draft-js/issues/325
    driver.execute_script("""
    var components = document.getElementsByClassName("DraftEditor-root");
  if(components && components.length) {
    var textarea = components[0].getElementsByClassName('public-DraftEditor-content')[0];
    var textEvent = document.createEvent('TextEvent');
    textEvent.initTextEvent ('textInput', true, true, null, '%s');                    
    textarea.dispatchEvent(textEvent);
  }      
    """ % (text), element)

class TestSite():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_valid_rule(self):
        self.driver.get("http://localhost:3000/")
        self.driver.set_window_size(1280, 720)
        element = self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-info")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".public-DraftStyleDefault-block").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".notranslate")
        passTextIntoEditor(self.driver, "all doors should be next to a window", element)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-block").click()
        time.sleep(2)
        response_element = self.driver.find_element(By.CSS_SELECTOR, "#response-content")
        response_text = response_element.get_attribute("innerText")
        assert(response_text =="ALL Object0 = Door\nANY Object1 = Window\n(Object0 and Object1 NextTo EQUAL True)")
        retranslation_element = self.driver.find_element(By.CSS_SELECTOR, "#retranslation-content")
        retranslation_text = retranslation_element.get_attribute("innerText")
        assert(retranslation_text == 'For all Door objects and any Window object, Door and Window must have the "NextTo that is equal to True" relation.')

    def test_invalid_rule(self):
        self.driver.get("http://localhost:3000/")
        self.driver.set_window_size(1280, 720)
        element = self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-info")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".public-DraftStyleDefault-block").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".notranslate")
        passTextIntoEditor(self.driver, "this is nonsense", element)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-block").click()
        time.sleep(2)
        response_element = self.driver.find_element(By.CSS_SELECTOR, "#response-content")
        response_text = response_element.get_attribute("innerText")
        assert(response_text=="Sentence has failed to parse.")
        retranslation_element = self.driver.find_element(By.CSS_SELECTOR, "#retranslation-content")
        retranslation_text = retranslation_element.get_attribute("innerText")
        assert(retranslation_text == '')

    def test_rule_with_custom_objects(self):
        self.driver.get("http://localhost:3000/")
        self.driver.set_window_size(1280, 720)
        element = self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-info")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".public-DraftStyleDefault-block").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".notranslate")
        passTextIntoEditor(self.driver, "All window is above a basin", element)
        time.sleep(2)
        self.driver.find_element(By.CSS_SELECTOR, ".warning-card .btn-outline-danger").click()
        self.driver.find_element(By.CSS_SELECTOR, ".btn-block").click()
        time.sleep(2)
        response_element = self.driver.find_element(By.CSS_SELECTOR, "#response-content")
        response_text = response_element.get_attribute("innerText")
        assert(response_text=="ALL Object0 = Window\nANY Object1 = basin\n(Object0 and Object1 IsAbove EQUAL True)")
        retranslation_element = self.driver.find_element(By.CSS_SELECTOR, "#retranslation-content")
        retranslation_text = retranslation_element.get_attribute("innerText")
        assert(retranslation_text == 'For all Window objects and any basin object, Window and basin must have the "IsAbove that is equal to True" relation.')
    
    def test_highlighting(self):
        self.driver.get("http://localhost:3000/")
        self.driver.set_window_size(1280, 720)
        element = self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-info")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".public-DraftStyleDefault-block").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".notranslate")
        passTextIntoEditor(self.driver, "All windows should have a width of no less than 15 inch and a height of no more than 2 feet and is above a donut.", element)
        time.sleep(2)
        # Check that:
        # - windows is highlighted as types
        text_container = self.driver.find_element_by_xpath("//span[contains(text(), 'windows')]")
        parent_with_style = text_container.find_element_by_xpath('../..')
        style = parent_with_style.get_attribute("style")
        assert(style=="color: rgb(255, 193, 7);")
        # - width, height are highlighted as properties
        text_container = self.driver.find_element_by_xpath("//span[contains(text(), 'width')]")
        parent_with_style = text_container.find_element_by_xpath('../..')
        style = parent_with_style.get_attribute("style")
        assert(style=="color: rgb(40, 167, 69);")
        text_container = self.driver.find_element_by_xpath("//span[contains(text(), 'height')]")
        parent_with_style = text_container.find_element_by_xpath('../..')
        style = parent_with_style.get_attribute("style")
        assert(style=="color: rgb(40, 167, 69);")
        # - inch, feet are highlighted as units
        text_container = self.driver.find_element_by_xpath("//span[contains(text(), 'inch')]")
        parent_with_style = text_container.find_element_by_xpath('../..')
        style = parent_with_style.get_attribute("style")
        assert(style=="color: rgb(23, 162, 184);")
        text_container = self.driver.find_element_by_xpath("//span[contains(text(), 'feet')]")
        parent_with_style = text_container.find_element_by_xpath('../..')
        style = parent_with_style.get_attribute("style")
        assert(style=="color: rgb(23, 162, 184);")
        # - above is highlighted as relation
        text_container = self.driver.find_element_by_xpath("//span[contains(text(), 'above')]")
        parent_with_style = text_container.find_element_by_xpath('../..')
        style = parent_with_style.get_attribute("style")
        assert(style=="color: rgb(0, 123, 255);")
        # - donut is highlighted as unknown
        text_container = self.driver.find_element_by_xpath("//span[contains(text(), 'donut')]")
        parent_with_style = text_container.find_element_by_xpath('../..')
        style = parent_with_style.get_attribute("style")
        assert(style=="color: rgb(220, 53, 69);")
    
    def test_switch_active_rule(self):
        self.driver.get("http://localhost:3000/")
        self.driver.set_window_size(1280, 720)
        self.driver.find_element(By.CSS_SELECTOR, ".hamburger-inner").click()
        self.driver.find_element(By.CSS_SELECTOR, ".notranslate > div > div").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".notranslate")
        passTextIntoEditor(self.driver, "All window is next to a door", element)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-block").click()
        self.driver.find_element(By.CSS_SELECTOR, ".add-rule-button").click()
        self.driver.find_element(By.CSS_SELECTOR, ".list-option:nth-child(2)").click()
        self.driver.find_element(By.CSS_SELECTOR, ".notranslate > div > div").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".notranslate")
        passTextIntoEditor(self.driver, "Any sink is next to a window", element)
        self.driver.find_element(By.CSS_SELECTOR, ".select-css").click()
        dropdown = self.driver.find_element(By.CSS_SELECTOR, ".select-css")
        dropdown.find_element(By.XPATH, "//option[. = 'Error Level: Warning']").click()
        self.driver.find_element(By.CSS_SELECTOR, ".select-css").click()
        self.driver.find_element(By.CSS_SELECTOR, ".btn-block").click()
        time.sleep(1)
        self.driver.find_element(By.CSS_SELECTOR, ".list-option:nth-child(1)").click()
        # Confirm that the first rule has been selected
        time.sleep(1)
        response_element = self.driver.find_element(By.CSS_SELECTOR, "#response-content")
        response_text = response_element.get_attribute("innerText")
        assert(response_text =="ALL Object0 = Window\nANY Object1 = Door\n(Object0 and Object1 NextTo EQUAL True)")
        assert(Select(self.driver.find_element(By.CSS_SELECTOR, ".select-css")).first_selected_option.text == "Error Level: Recommended")
        self.driver.find_element(By.CSS_SELECTOR, ".list-option:nth-child(2)").click()
        time.sleep(1)
        # Confirm that the second rule has been reselected
        response_element = self.driver.find_element(By.CSS_SELECTOR, "#response-content")
        response_text = response_element.get_attribute("innerText")
        assert(response_text =="ALL Object0 = Sink\nANY Object1 = Window\n(Object0 and Object1 NextTo EQUAL True)")
        assert(Select(self.driver.find_element(By.CSS_SELECTOR, ".select-css")).first_selected_option.text == "Error Level: Warning")

    def test_delete_rule(self):
        self.driver.get("http://localhost:3000/")
        self.driver.set_window_size(1280, 720)
        element = self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-danger")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".notranslate > div").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".notranslate")
        passTextIntoEditor(self.driver, "All windows are next to a door", element)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-block").click()
        self.driver.find_element(By.CSS_SELECTOR, ".hamburger-box").click()
        time.sleep(1)
        self.driver.find_element(By.CSS_SELECTOR, ".add-rule-button").click()
        self.driver.find_element(By.CSS_SELECTOR, ".list-option:nth-child(2)").click()
        self.driver.find_element(By.CSS_SELECTOR, ".notranslate").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".notranslate")
        passTextIntoEditor(self.driver, "All sinks are besides a countertop", element)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-block").click()
        time.sleep(2)
        element = self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-warning")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-success")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, ".list-option:nth-child(1)").click()
        self.driver.find_element(By.ID, "delete-button").click()
        # Assert that there is only one element in the ruleset list, and that it is Rule2
        assert(self.driver.find_element(By.CSS_SELECTOR, ".list-option:nth-child(1)").get_attribute("innerText") == "Rule2")
        # Assert that the currently active rule has changed
        response_element = self.driver.find_element(By.CSS_SELECTOR, "#response-content")
        response_text = response_element.get_attribute("innerText")
        assert(response_text =="ALL Object0 = Sink\nANY Object1 = CounterTop\n(Object0 and Object1 Beside EQUAL True)")
        elements = self.driver.find_elements_by_xpath("//span[contains(text(), 'countertop')]")
        assert(len(elements) == 1)
        


    
